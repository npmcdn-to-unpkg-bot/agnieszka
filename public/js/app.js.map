{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\n//Pure JS, completely customizable preloader from GreenSock.\n//Once you create an instance like var preloader = new GSPreloader(), call preloader.active(true) to open it, preloader.active(false) to close it, and preloader.active() to get the current status. Only requires TweenLite and CSSPlugin (http://www.greensock.com/gsap/)\nvar preloader = new GSPreloader({\n  radius: 42,\n  dotSize: 15,\n  dotCount: 10,\n  colors: [\"#FFADA9\", \"#ff7c76\", \"#ffa9d0\"], //have as many or as few colors as you want.\n  boxOpacity: 0,\n  boxBorder: \"1px solid #AAA\",\n  animationOffset: 1.8 });\n\n//open the preloader\npreloader.active(true);\n\n//for testing: click the window to toggle open/close the preloader\n// document.onclick = document.ontouchstart = function() {\n//   preloader.active( !preloader.active() );\n// };\n\n//this is the whole preloader class/function\nfunction GSPreloader(options) {\n  options = options || {};\n  var parent = options.parent || document.body,\n      element = this.element = document.createElement(\"div\"),\n      radius = options.radius || 42,\n      dotSize = options.dotSize || 15,\n      animationOffset = options.animationOffset || 1.8,\n      //jumps to a more active part of the animation initially (just looks cooler especially when the preloader isn't displayed for very long)\n  createDot = function createDot(rotation) {\n    var dot = document.createElement(\"div\");\n    element.appendChild(dot);\n    TweenLite.set(dot, { width: dotSize, height: dotSize, transformOrigin: -radius + \"px 0px\", x: radius, backgroundColor: colors[colors.length - 1], borderRadius: \"50%\", force3D: true, position: \"absolute\", rotation: rotation });\n    dot.className = options.dotClass || \"preloader-dot\";\n    return dot;\n  },\n      i = options.dotCount || 10,\n      rotationIncrement = 360 / i,\n      colors = options.colors || [\"#61AC27\", \"black\"],\n      animation = new TimelineLite({ paused: true }),\n      dots = [],\n      isActive = false,\n      box = document.createElement(\"div\"),\n      tl,\n      dot,\n      closingAnimation,\n      j;\n  colors.push(colors.shift());\n\n  //setup background box\n  TweenLite.set(box, { width: radius * 2 + 70, height: radius * 2 + 70, borderRadius: \"14px\", backgroundColor: options.boxColor || \"white\", border: options.boxBorder || \"1px solid #AAA\", position: \"absolute\", xPercent: -50, yPercent: -50, opacity: options.boxOpacity !== null ? options.boxOpacity : 0.3 });\n  box.className = options.boxClass || \"preloader-box\";\n  element.appendChild(box);\n\n  parent.appendChild(element);\n  TweenLite.set(element, { position: \"fixed\", top: \"45%\", left: \"50%\", perspective: 600, overflow: \"visible\", zIndex: 2000 });\n  animation.from(box, 0.1, { opacity: 0, scale: 0.1, ease: Power1.easeOut }, animationOffset);\n  while (--i > -1) {\n    dot = createDot(i * rotationIncrement);\n    dots.unshift(dot);\n    animation.from(dot, 0.1, { scale: 0.01, opacity: 0, ease: Power1.easeOut }, animationOffset);\n    //tuck the repeating parts of the animation into a nested TimelineMax (the intro shouldn't be repeated)\n    tl = new TimelineMax({ repeat: -1, repeatDelay: 0.25 });\n    for (j = 0; j < colors.length; j++) {\n      tl.to(dot, 2.5, { rotation: \"-=360\", ease: Power2.easeInOut }, j * 2.9).to(dot, 1.2, { skewX: \"+=360\", backgroundColor: colors[j], ease: Power2.easeInOut }, 1.6 + 2.9 * j);\n    }\n    //stagger its placement into the master timeline\n    animation.add(tl, i * 0.07);\n  }\n  if (TweenLite.render) {\n    TweenLite.render(); //trigger the from() tweens' lazy-rendering (otherwise it'd take one tick to render everything in the beginning state, thus things may flash on the screen for a moment initially). There are other ways around this, but TweenLite.render() is probably the simplest in this case.\n  }\n\n  //call preloader.active(true) to open the preloader, preloader.active(false) to close it, or preloader.active() to get the current state.\n  this.active = function (show) {\n    if (!arguments.length) {\n      return isActive;\n    }\n    if (isActive != show) {\n      isActive = show;\n      if (closingAnimation) {\n        closingAnimation.kill(); //in case the preloader is made active/inactive/active/inactive really fast and there's still a closing animation running, kill it.\n      }\n      if (isActive) {\n        element.style.visibility = \"visible\";\n        TweenLite.set([element, box], { rotation: 0 });\n        animation.play(animationOffset);\n      } else {\n        closingAnimation = new TimelineLite();\n        if (animation.time() < animationOffset + 0.3) {\n          animation.pause();\n          closingAnimation.to(element, 1, { rotation: -360, ease: Power1.easeInOut }).to(box, 1, { rotation: 360, ease: Power1.easeInOut }, 0);\n        }\n        closingAnimation.staggerTo(dots, 0.3, { scale: 0.01, opacity: 0, ease: Power1.easeIn, overwrite: false }, 0.05, 0).to(box, 0.4, { opacity: 0, scale: 0.2, ease: Power2.easeIn, overwrite: false }, 0).call(function () {\n          animation.pause();closingAnimation = null;\n        }).set(element, { visibility: \"hidden\" });\n      }\n    }\n    return this;\n  };\n}\n\nvar loadingBG = $('.page-load-bg'),\n    body = $('.content'),\n    page = $('.page'),\n    pageElements = $('.page > div'),\n    header = $('header'),\n    sidebar = $('#sidebar'),\n    topNavBar = $('.top-navbar'),\n    topNavLinks = $('#sidebar a'),\n    ease1 = 'Power2.easeIn',\n    ease2 = 'Power2.easeOut',\n    noease = 'Power0.easeNone',\n    easeParams = 4,\n    delay = 5;\n\nTweenMax.set(pageElements, { y: 50 });\nTweenMax.set(topNavBar, { y: -150 });\nTweenMax.set(topNavLinks, { y: -15, opacity: 0 });\n\n$(window).on('load', function () {\n\n  preloader.active(false);\n  var pageloadTween = new TimelineMax().staggerTo([body, topNavBar, sidebar], 0.60, { opacity: 1, ease: ease2 }, 0.20).to(topNavBar, 0.2, { y: 0, ease: ease2 }, \"-=0.40\").staggerTo(topNavLinks, 0.8, { y: 0, opacity: 1, ease: ease2 }, 0.15, \"-=1.2\").to(page, 0.2, { opacity: 1, ease: Power3.easeInOut }).staggerTo(pageElements, 1, { y: 0, ease: Power3.easeInOut }, 0.20, \"-=0.25\");\n\n  $('.toggle').click(function () {\n    $(this).toggleClass('open');\n    $(header).toggleClass('open');\n\n    if ($(header).hasClass('open')) {\n      TweenMax.staggerTo(topNavLinks, 0.18, { ease: ease2, x: 0, delay: 0.1 }, 0.04);\n    } else {\n      TweenMax.staggerTo(topNavLinks, 0.18, { ease: ease1, x: -460 }, 0.04);\n    }\n  }); //$('.toggle').click(function()\n\n  $(document).scroll(function () {\n    if ($(header).hasClass('open')) {\n      $('.toggle').toggleClass('open');\n      $(header).toggleClass('open');\n      TweenMax.staggerTo(topNavLinks, 0.18, { ease: Power2.easeOut, x: -766 }, 0.08);\n    }\n  }); //$(document).scroll(function()\n\n  $(document).on('submit', '.form', function () {\n    var $form = $(this),\n        $button,\n        label;\n    $form.find(':submit').each(function () {\n      $button = $(this);\n      label = $button.data('after-submit-value');\n      if (typeof label != 'undefined') {\n        $button.val(label).prop('disabled', true);\n      }\n    });\n  });\n}); // ./ $(window).on('load', function()\n\n},{}]},{},[1]);\n"],"file":"app.js","sourceRoot":"/source/"}